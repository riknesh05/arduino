#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define FLEX1 A0
#define FLEX2 A1
#define TRIG 9
#define ECHO 10
#define RED_LED 7
#define GREEN_LED 8

LiquidCrystal_I2C lcd(0x27, 16, 2);
long lastDistance = 0;

// Get stable distance using median filtering
long getDistance() {
    digitalWrite(TRIG, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG, LOW);
    long duration = pulseIn(ECHO, HIGH, 30000); // Timeout for no object
    return duration * 0.034 / 2; // Convert to cm
}

// Reduce flickering by ignoring sudden jumps
long getFilteredDistance() {
    long newDist = getDistance();
    if (abs(newDist - lastDistance) > 5) { // Ignore sudden jumps
        newDist = lastDistance;
    }
    lastDistance = newDist;
    return newDist;
}

void setup() {
    pinMode(FLEX1, INPUT);
    pinMode(FLEX2, INPUT);
    pinMode(TRIG, OUTPUT);
    pinMode(ECHO, INPUT);
    pinMode(RED_LED, OUTPUT);
    pinMode(GREEN_LED, OUTPUT);

    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Smart Parking");
    lcd.setCursor(0, 1);
    lcd.print("System");
    delay(1000);
    lcd.clear();
}

void loop() {
    int flex1Val = analogRead(FLEX1);
    int flex2Val = analogRead(FLEX2);
    long distance = getFilteredDistance(); // Use filtered readings

    lcd.clear();  // Clear LCD before writing new text
    
    if ((flex1Val > 20 || flex2Val > 20) && distance < 7) { // Fixed logic
        lcd.setCursor(0, 0);
        lcd.print("Parking ");
         lcd.setCursor(0, 1);
    lcd.print("Occupied");
      digitalWrite(RED_LED, HIGH);  // Turn ON red LED
        digitalWrite(GREEN_LED, LOW); // Turn OFF green LED
    } else {
        lcd.setCursor(0, 0);
        lcd.print("Parking ");
         lcd.setCursor(0, 1);
    lcd.print("Available");
     digitalWrite(RED_LED, LOW);   // Turn OFF red LED
        digitalWrite(GREEN_LED, HIGH); // Turn ON green LED
    }

    delay(300); // Add delay to prevent flickering
}
